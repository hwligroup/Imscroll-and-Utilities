function pc=SmoothBackground_v2(Bkgndaoifits, SGsmooth, Refaoifits)
%
% function SmoothBackground_v2(bkgndaoifits, SGsmooth, Refaoifits)
%
% Used to smooth the background traces recorded via imscroll gui by choosing
% AOIs made with 'make bkgnd AOI circle'
% There will be several background AOIs associated with each reference AOI,
% and this routine will ave and smooth those background AOIs (removing bad
% outlier jumps in the background traces.
%
% Bkgndaoifits == aoifits structure (stored by imscroll) for the background
%            AOIs chosen using the  Remove/Retain AOIs Near AOIs operations
% AOInums == 1 x N vector list of AOIs for which the function will obtain
%            smoothed background traces.  There is a reference set of AOIs
%            and each background trace is associated with one of the
%            reference AOIs.  This list of AOInums refers to the index
%            running over the reference AOIs.
% Refaoifits == aoifits structure (stored by imscroll) for the reference
%            AOIs.  It is the traces from these referece AOIs for which we
%            we seek to subtract a background.  Once the background is 
%            subtracted, the trace baseline should be at zero.
% SGsmooth == [ SG_PolyOrder   SG_Frames]  parameter for Savitsky-Golay 
%            smoothing of background traces, where
% SG_PolyOrder==   parameter specifying the order of polynomial 
%               used in Savitsky-Golay smoothing 
% SG_Frame ==   parameter specifying the window size (number of points) used
%              for Savitsky-Golay smoothing.  (must be odd) e.g. = 41 

% Copyright 2018 Larry Friedman, Brandeis University.

% This is free software: you can redistribute it and/or modify it under the
% terms of the GNU General Public License as published by the Free Software
% Foundation, either version 3 of the License, or (at your option) any later
% version.

% This software is distributed in the hope that it will be useful, but WITHOUT ANY
% WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
% A PARTICULAR PURPOSE. See the GNU General Public License for more details.
% You should have received a copy of the GNU General Public License
% along with this software. If not, see <http://www.gnu.org/licenses/>.

% Protocol:   Our Reference AOIs (Refaoifits) are circled by several close
% background AOIs (Bkgndaoifits).  We first average the data trace from the
% background AOIs, and smooth that averaged trace.  The background traces
% might still show nonspecific landings or dirt noise we would like to
% avoid so we find the one background trace that deviates the least from
% the smoothed average background trace, hoping that one trace will then be
% absent of nonspecific protein landings or dirt landings.  That one chosen
% background trace is then smoothed (Savitsky-Golay) and we subtract that
% smoothed background trace from the reference data trace, yielding the 
% TraceDiffRef variable.  That background-subtracted trace will usually
% have a baseline (so long as the reference trace is not mostly in the high
% state), which is now close to zero.  We calculate the (small) mean of that
% baseline and add it to (include it in) the smoothed background so that 
% when we form the (Referece data trace)-(smoothed background trace) then
% the result has a baseline that will be zero (or as close as we can
% arrange to it being zero).



%keyboard
RefaoifitsMinusBkgnd=Refaoifits;      % Save space for output.  We will  
                                    % later (below) replace) the data traces.
RefaoifitsMinusBkgnd.Bkdata=Refaoifits.data;  % Replicate the data list.  We

                                   % will replace these with the final
                                   % smoothed background traces that we use
AOInums=Refaoifits.aoiinfo2(:,6);   % List of AOI numbers in our reference Refaoifits
AOIsWithoutBkgndSubtraction=[];     % Will store a list of those reference AOIs for which
                                    % we are unable to subtract a background (b/c there are
                                    % no neighboring AOIs associated with them in the
                                    % background AOI set we chose).

for indxroot=AOInums'
  
            % Cycle through all the reference AOIs
    if indxroot/20==round(indxroot/20)
        indxroot
    end
    
    refAOInum=AOInums(indxroot);           % Identifies the referece AOI for which we 
                                % will fetch and smooth background traces

        % Pick out the aoiinfo2 list of background AOIs that pair with the
        % current value of reference AOI
                            %[(framenumber when marked) ave x y pixnum aoinumber]
    Bkgndaoiinfo2=Bkgndaoifits.aoiinfo2(Bkgndaoifits.RefAOINearLogik{refAOInum},:);
    [rose col]=size(Bkgndaoiinfo2);     % rose=# of background AOIs in this list
    
    if rose>0
          
            % Here if we are able to subtract background AOIs for the current
            % reference AOI specified by refAOInum=AOInums(indxroot)
        logik=Bkgndaoifits.data(:,1)==Bkgndaoiinfo2(1,6);   % Pull out the integrated
                                % trace for the first AOI in our list
        dat1=Bkgndaoifits.data(logik,:);    % All data rows for first AOI in our list,
                                    % so the rows of dat1 cover all the
                                    % frames of data for this AOI
                                  
        [rosedat coldat]=size(dat1);
        dat=zeros(rosedat,coldat,rose);      % Save space for the integrated traces of the bkgnd AOIs in our list
        datonly=zeros(rose,rosedat);        % Will save just the integrated data.  One trace along each row
                            % rosedat = # of frames in a data trace
        for indx=1:rose
                % Cycle through the AOIs in our Bkgndaoiinfo2 list,
                % fetching the integrated traces for each
            logik=Bkgndaoifits.data(:,1)==Bkgndaoiinfo2(indx,6);
            dat(:,:,indx)=Bkgndaoifits.data(logik,:);   % Storing the data traces for the background AOIs
                                % associated with reference AOI number refAOInum 
            datonly(indx,:)=dat(:,8,indx)'; % Data trace stored in a row
 
        end
    
        AveBkgndData=dat(:,:,1);       % Create data matrix containing list of frame numbers and data
                    % (# of rows)=# of frames of data in the sequence
      
        stdDev=std(dataonly);       % (1 x rosedat), std deviation of bkgnd AOIs for each frame
                                    % Large deviations of baseline do not show up in these values of std,
                                    % just the noise of the pts in each frame
        MeanStd=mean(stdDev);       % 1 x 1, The mean std dev of the bkgnd AOIs, averaged frame-by-frame along the entire trace 
        AveBkgndData(:,8)=sum(dat(:,8,:),3)/rose;  % Substitute average of all the background traces
                                  % into the integrated trace column
                     % rose = # of bkgnd AOIs for the current reference AOI 
    
                        % Next, we want to SG smooth the ave trace, 
                       
                       
                        % (bkgnd trace) - (smoothed ave background trace)
        MedianBkgndData=median(dat(:,8,:),3);
        SmoothedAveTrace=sgolayfilt(AveBkgndData(:,8),SGsmooth(1),SGsmooth(2));
        % Now we look frame-by-frame for outliers among the bkgnd AOIs
        % We throw out pts that are more than 4*MeanStd off the SmoothedAveTrace trace 
        AveBkgndTraceNoOuts=zeros(rosedat,1);   % Average background trace after removing outliers
        for indx=1:rosedat
                    % Cycle through all the frames
           logik=abs(dat(indx,8,:)-SmoothedAveTrace(indx))<4*MeanStd;   % Retain bkgnd values only within 4*MeanStd of smoothed background
           AveBkgndTraceNoOuts(indx,:)=mean(dat(indx,8,logik));
        end
        SmoothedAveTraceNoOuts=sgolayfilt(AveBkgndTraceNoOuts,SGsmooth(1),SGsmooth(2));
       %**************************Here 4/4/2018
        logik=Refaoifits.data(:,1)==refAOInum; % reAOInum is the current reference AOI number that we are
                            % currently operating on (to remove the baseline offset) 
        Refdat=Refaoifits.data(logik,:);        % Pick out data for the reference AOI
     
                %*** Pick one of the following three statements:
        %RefTraceMinusBkgnd=Refdat(:,8)- SmoothedMedianTraceAll;
        RefTraceMinusBkgnd=Refdat(:,8)- SmoothedAveTraceNoOuts;
        %RefTraceMinusBkgnd=Refdat(:,8)- SmoothedMedianTraceAllNoOutlier';
        %*******
        
   
       % logik=Refaoifits.data(:,1)==refAOInum;      % Find all data trace entries for current reference AOI number
        %RefaoifitsMinusBkgnd.data(logik,8)=RefTraceMinusBkgnd;    % Replace the data entries for the current AOI
                                    % with background corrected data
        RefaoifitsMinusBkgnd.Bkdata(logik,8)=BkgrndTrace;                                    
       
    
                                    
                                    
    else
             % Here if we are UNABLE to subtract background AOIs for the current
            % reference AOI specified by refAOInum=AOInums(indxroot)
            
            % Add this reference AOI to our list of AOIs for which we did
            % not subtract the background
       AOIsWithoutBkgndSubtraction=[AOIsWithoutBkgndSubtraction;refAOInum];     
       sprintf('No background AOIs for ref AOI number %i',refAOInum)
    end
 

end
                                % Add member listing reference AOIs for which we were
                                % unable to subtract a background (no
                                % neighboring AOIs in our chosen bkgnd AOI set)
RefaoifitsMinusBkgnd.AOIsWithoutBkgndSubtraction=AOIsWithoutBkgndSubtraction;
pc=RefaoifitsMinusBkgnd;        % Output an aoifits structure containing a pc.data with background
                    % corredted data, and pc.Bkdata containing a data
                    % listing with the smoothed background data.
    


